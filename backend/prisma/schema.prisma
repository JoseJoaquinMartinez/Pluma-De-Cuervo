// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model AdminUser {
  id Int @id @default(autoincrement())
  
  email String @unique
  password String
  role String @default("admin")

  adminUserData AdminUserData[]
}

model AdminUserData {
  id Int @id @default(autoincrement())
    
  comments Comment[]

  adminUser AdminUser @relation(fields: [adminUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminUserId Int
}

model RegularUser {
  id Int @id @default(autoincrement())

  email String @unique
  password String
  role String @default("user")

  regularUserData RegularUserData[]
}

model RegularUserData {
  id Int @id @default(autoincrement())

  userName String? @default("Aventurero")
  imagen String?
 
  comments Comment[]

  regularUser RegularUser @relation(fields: [regularUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  regularUserId Int

}

model Book {
  id Int @id @default(autoincrement())

  title String @unique
  image String?
  Synopsis String @default("")

  chapter Chapter[]
}

model Chapter {
  id Int @id @default(autoincrement())

  title String @unique
  image String? 
  chapterNumber Int
  paragraph Paragraph[]

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId Int
}

model Paragraph {
  id Int @id @default(autoincrement())

  paragraphNumber Int
  comment Comment[]
  paragraphText String
  paragraphType String

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chapterId Int

}

model Comment {
  id Int @id  @default(autoincrement())

  createdAt DateTime @default(now())
  commentBody String

  paragraph Paragraph @relation(fields: [paragraphId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paragraphId Int

  regularUserData RegularUserData? @relation(fields: [regularUserDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  regularUserDataId Int?

  adminUserData AdminUserData? @relation(fields: [adminUserDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminUserDataId Int?
}

model Blog {
  id Int @id @default(autoincrement())

  title String @unique
  imagen String?
  blogText String
  createdAt DateTime @default(now())

}